<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="FB_Sequence_Recorder_Test" Id="{f5c2b13f-1378-4b19-a6ca-f4d7d00d8751}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Sequence_Recorder_Test EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[AddOnePosition();
AddTwoPositions();
ClearPositions();
AddTwoClearAddOne();
TryAddDuplicatePosition();]]></ST>
    </Implementation>
    <Method Name="AddOnePosition" Id="{250ab92c-fe4b-4de2-89fa-461cfea3cf83}">
      <Declaration><![CDATA[METHOD AddOnePosition
VAR
	inputBaseAngle : INT := 123;
	inputShoulderAngle : INT := 123;
	inputElbowAngle : INT := 123;
	expectedBaseAngle : INT := 123;
	actualBaseAngle : INT;
	FB_Seq_Rec: FB_Sequence_Recorder;
	recordPosition : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TEST: Add one position');

FB_Seq_Rec(
	inputBase:= inputBaseAngle, 
	inputShoulder:= inputShoulderAngle, 
	inputElbow:= inputElbowAngle, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 0, 
	deletePositions:= FALSE, 
	outputBase=> actualBaseAngle, 
	outputShoulder=> , 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );

IF recordPosition THEN
	recordPosition := FALSE;
END_IF

AssertEquals(Expected := expectedBaseAngle,
	Actual := actualBaseAngle,
	Message := 'Position 1 was not recorded');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddTwoClearAddOne" Id="{02463f65-ed15-4150-a2d4-e1a236ab9179}">
      <Declaration><![CDATA[METHOD AddTwoClearAddOne
VAR
	inputBaseAngle1 : INT := 123;
	inputShoulderAngle1 : INT := 123;
	inputElbowAngle1 : INT := 123;
	expectedBaseAngle1 : INT := 123;
	inputBaseAngle2 : INT := 234;
	inputShoulderAngle2 : INT := 234;
	inputElbowAngle2 : INT := 234;
	expectedShoulderAngle2 : INT := 234;
	actualShoulderAngle1 : INT;
	actualShoulderAngle2 : INT;
	FB_Seq_Rec: FB_Sequence_Recorder;
	recordPosition : BOOL := TRUE;
	delete : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TEST: Add two, delete, then add one position');

FB_Seq_Rec(
	inputBase:= inputBaseAngle1, 
	inputShoulder:= inputShoulderAngle1, 
	inputElbow:= inputElbowAngle1, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 0, 
	deletePositions:= delete, 
	outputBase=> actualShoulderAngle1, 
	outputShoulder=> , 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );
	
FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 1, 
	deletePositions:= delete, 
	outputBase=> , 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );

delete := TRUE;
recordPosition := FALSE;

FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 1, 
	deletePositions:= delete, 
	outputBase=> , 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );

delete := FALSE;
recordPosition := TRUE;


FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 0, 
	deletePositions:= delete, 
	outputBase=> , 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );	

AssertEquals(Expected := expectedShoulderAngle2,
	Actual := actualShoulderAngle2,
	Message := 'Wrong value returned');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddTwoPositions" Id="{66c4d13e-c182-461b-8d96-1bf4269358c5}">
      <Declaration><![CDATA[METHOD AddTwoPositions
VAR
	inputBaseAngle1 : INT := 123;
	inputShoulderAngle1 : INT := 123;
	inputElbowAngle1 : INT := 123;
	expectedBaseAngle1 : INT := 123;
	inputBaseAngle2 : INT := 234;
	inputShoulderAngle2 : INT := 234;
	inputElbowAngle2 : INT := 234;
	expectedShoulderAngle2 : INT := 234;
	actualShoulderAngle1 : INT;
	actualShoulderAngle2 : INT;
	FB_Seq_Rec: FB_Sequence_Recorder;
	recordPosition : BOOL := TRUE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TEST: Add two positions');

FB_Seq_Rec(
	inputBase:= inputBaseAngle1, 
	inputShoulder:= inputShoulderAngle1, 
	inputElbow:= inputElbowAngle1, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 0, 
	deletePositions:= FALSE, 
	outputBase=> actualShoulderAngle1, 
	outputShoulder=> , 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );
	
FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 1, 
	deletePositions:= FALSE, 
	outputBase=> , 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );

IF recordPosition THEN
	recordPosition := FALSE;
END_IF

AssertEquals(Expected := expectedShoulderAngle2,
	Actual := actualShoulderAngle2,
	Message := 'Position 2 was not recorded');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="ArrayFull" Id="{f3928984-d735-43f1-8d6a-1440fcb37427}">
      <Declaration><![CDATA[METHOD ArrayFull
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearPositions" Id="{03ab6b4d-1a72-4043-b3ca-81bc8d2c5f10}">
      <Declaration><![CDATA[METHOD ClearPositions : BOOL
VAR
	inputBaseAngle1 : INT := 123;
	inputShoulderAngle1 : INT := 123;
	inputElbowAngle1 : INT := 123;
	expectedBaseAngle1 : INT := 123;
	inputBaseAngle2 : INT := 234;
	inputShoulderAngle2 : INT := 234;
	inputElbowAngle2 : INT := 234;
	expectedShoulderAngle2 : INT := 0;
	actualShoulderAngle1 : INT;
	actualShoulderAngle2 : INT;
	FB_Seq_Rec: FB_Sequence_Recorder;
	recordPosition : BOOL := TRUE;
	delete : BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TEST: Clear positions');

FB_Seq_Rec(
	inputBase:= inputBaseAngle1, 
	inputShoulder:= inputShoulderAngle1, 
	inputElbow:= inputElbowAngle1, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 0, 
	deletePositions:= FALSE, 
	outputBase=> actualShoulderAngle1, 
	outputShoulder=> , 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );
	
FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 1, 
	deletePositions:= delete, 
	outputBase=> , 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );

IF recordPosition THEN
	recordPosition := FALSE;
END_IF

delete := TRUE;

FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 1, 
	deletePositions:= delete, 
	outputBase=> , 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> , 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );

AssertEquals(Expected := expectedShoulderAngle2,
	Actual := actualShoulderAngle2,
	Message := 'Positions were not deleted');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryAddDuplicatePosition" Id="{ffc03e01-d799-4489-b7b1-8122c4070b44}">
      <Declaration><![CDATA[METHOD TryAddDuplicatePosition
VAR
	inputBaseAngle1 : INT := 123;
	inputShoulderAngle1 : INT := 123;
	inputElbowAngle1 : INT := 123;
	expectedBaseAngle1 : INT := 0;
	inputBaseAngle2 : INT := 0;
	inputShoulderAngle2 : INT := 0;
	inputElbowAngle2 : INT := 0;
	expectedResult : BOOL := FALSE;
	actualBaseAngle1 : INT;
	actualShoulderAngle1 : INT;
	actualElbowAngle1 : INT;
	actualBaseAngle2 : INT;
	actualShoulderAngle2 : INT;
	actualElbowAngle2 : INT;
	FB_Seq_Rec: FB_Sequence_Recorder;
	recordPosition : BOOL := TRUE;
	arePositionsDuplicate: BOOL := FALSE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TEST: Try add duplicate positions');

FB_Seq_Rec(
	inputBase:= inputBaseAngle1, 
	inputShoulder:= inputShoulderAngle1, 
	inputElbow:= inputElbowAngle1, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 0, 
	deletePositions:= FALSE, 
	outputBase=> actualBaseAngle1, 
	outputShoulder=> actualShoulderAngle1, 
	outputElbow=> actualElbowAngle1, 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );
	
FB_Seq_Rec(
	inputBase:= inputBaseAngle2, 
	inputShoulder:= inputShoulderAngle2, 
	inputElbow:= inputElbowAngle2, 
	recordPosition:= recordPosition, 
	returnPositionAtIndex:= 1, 
	deletePositions:= FALSE, 
	outputBase=> actualBaseAngle2, 
	outputShoulder=> actualShoulderAngle2, 
	outputElbow=> actualElbowAngle2, 
	numberRecordedPositions=> , 
	ERROR_arrayFull=> );
	
IF (actualBaseAngle1 = actualBaseAngle2) AND (actualShoulderAngle1 = actualShoulderAngle2) AND (actualElbowAngle1 = actualElbowAngle1) THEN
	arePositionsDuplicate := TRUE;
END_IF

AssertEquals(Expected := expectedResult,
	Actual := arePositionsDuplicate,
	Message := 'Not allowed to add duplicate values!');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>